//file:noinspection GroovyAssignabilityCheck
import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id "dev.architectury.architectury-pack200" version "0.1.3"
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "gg.essential.loom" version "0.10.0.1"
    id "java"
}

version = mod_ver
group = "net.wyvest"
archivesBaseName = mod_name

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = "UTF-8"

loom {
    launchConfigs {
        client {
            arg("--tweakClass", "cc.woverflow.onecore.tweaker.OneCoreTweaker")
            arg("--mixin", "mixins.redaction.json")
            property("mixin.debug.export", "true")
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new Pack200Adapter()
        mixinConfig("mixins.redaction.json")
        mixin.defaultRefmapName.set("mixins.redaction.refmap.json")
        accessTransformer(file("src/main/resources/redaction_at.cfg"))
    }
}

configurations {
    /* This creates an additional dependency configuration which shades libraries into your built jar file and adds them to your workspace classpath. */
    shade
    implementation.extendsFrom(shade)
}

repositories {
    maven { url 'https://repo.woverflow.cc/' }
}

dependencies {
    minecraft("com.mojang:minecraft:1.8.9")
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")
    shade ('gg.essential:loader-launchwrapper:1.1.3') {
        transitive = false
    }
    compileOnly 'gg.essential:essential-1.8.9-forge:1788'
    compileOnly ('org.spongepowered:mixin:0.8.5-SNAPSHOT')
    compileOnly 'cc.woverflow:onecore:1.2.2'
    shade ('cc.woverflow:onecore-tweaker:1.1.1') {
        transitive = false
    }
}

jar {
    dependsOn configurations.shade
    from(configurations.shade.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'gg.essential.vigilance.example.ExampleMod', 'dummyThing'
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    manifest.attributes(
            "ModSide": "CLIENT",
            "TweakClass": "cc.woverflow.onecore.tweaker.OneCoreTweaker",
            "TweakOrder": "0",
            "MixinConfigs": "mixins.redaction.json",
            'ForceLoadAsMod': true,
            'FMLAT': 'redaction_at.cfg'
    )

    enabled = false
}

/* This task simply replaces the `${version}` and `${mcversion}` properties in the mcmod.info with the data from Gradle. */
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    filesMatching("mcmod.info") {
        expand(
                "version" : project.version
        )
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xjvm-default=all-compatibility"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xjvm-default=all-compatibility"
    }
}

sourceSets {
    dummy
    main {
        compileClasspath += dummy.output
        output.resourcesDir = java.classesDirectory
    }
}